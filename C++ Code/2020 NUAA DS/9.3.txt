给定一个完美二叉树，其所有叶子节点都在同一层，每个父节点都有两个子节点。
二叉树定义如下：


struct Node {
 
 int val;
 
 Node *left;
 
 Node *right;
 
 Node *next;
}

填充它的每个 next 指针，让这个指针指向其下一个右侧节点。
如果找不到下一个右侧节点，则将 next 指针设置为 NULL。


初始状态下，所有?next 指针都被设置为 NULL。

?



算法详情
https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/

class Solution {
    public Node connect(Node root) {
        if(root==null)return root;
        ArrayDeque<Node> deque = new ArrayDeque<Node>();
        deque.offer(root);
        Node lastNode=root;
        while(!deque.isEmpty()){
        	Node temp=deque.poll();//逐个出队
        	if(temp.left!=null)deque.offer(temp.left);
        	if(temp.right!=null)deque.offer(temp.right);//左右孩子入队
        	if(temp==lastNode){//如果遍历到每层的最后一个节点，便不修正next指针
        		lastNode=deque.peekLast();//更新lastnode为下层的最后一个节点
        		continue;//不修正next
        	}
        	temp.next=deque.peekFirst();//修正next
        }
        return root;
    }
}